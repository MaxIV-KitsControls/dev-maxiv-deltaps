/*----- PROTECTED REGION ID(DeltaControllerStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        DeltaControllerStateMachine.cpp
//
// description : C++ source for the DeltaController and its alowed
//               methods for commands and attributes
//
// project :     BILT multi channel power supply.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================



#include <DeltaController.h>
#include <DeltaControllerClass.h>

/*----- PROTECTED REGION END -----*/


/*
 * DeltaController states description:
 *
 * ON :	Magnet is ON. 
 * OFF :	Magnet is OFF. 
 * FAULT :	Error detected. 
 * ALARM :	Alarm detected. 
 * UNKNOWN :	Communication fault 
 * MOVING :	Waiting for the current slope completion 
 */

namespace DeltaController_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : DeltaController::is_CurrentState_allowed()
 *	Description : Execution allowed for Current attribute.
 */
//--------------------------------------------------------

bool DeltaController::is_Current_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for Current attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(DeltaController::CurrentStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DeltaController::CurrentStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for Current attribute in READ access.
	
	/*----- PROTECTED REGION ID(DeltaController::read_CurrentStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DeltaController::read_CurrentStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DeltaController::is_VoltageState_allowed()
 *	Description : Execution allowed for Voltage attribute.
 */
//--------------------------------------------------------

bool DeltaController::is_Voltage_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for Voltage attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(DeltaController::VoltageStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DeltaController::VoltageStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for Voltage attribute in READ access.
	
	/*----- PROTECTED REGION ID(DeltaController::read_VoltageStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DeltaController::read_VoltageStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DeltaController::is_ImpedanceState_allowed()
 *	Description : Execution allowed for Impedance attribute.
 */
//--------------------------------------------------------

bool DeltaController::is_Impedance_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for Impedance attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(DeltaController::ImpedanceStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DeltaController::ImpedanceStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for Impedance attribute in READ access.
	
	/*----- PROTECTED REGION ID(DeltaController::read_ImpedanceStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DeltaController::read_ImpedanceStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DeltaController::is_VlimState_allowed()
 *	Description : Execution allowed for Vlim attribute.
 */
//--------------------------------------------------------

bool DeltaController::is_Vlim_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for Vlim attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(DeltaController::VlimStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DeltaController::VlimStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for Vlim attribute in READ access.
	
	/*----- PROTECTED REGION ID(DeltaController::read_VlimStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DeltaController::read_VlimStateAllowed_READ

	return true;
}


//=================================================
//	Dynamic Attributes Allowed Methods
//=================================================


	/*----- PROTECTED REGION ID(DeltaController::are_dynamic_attributes_allowed) ENABLED START -----*/

	//	Add your code to check if dynamic attributes are alowed

	/*----- PROTECTED REGION END -----*/	//	DeltaController::are_dynamic_attributes_allowed


//=================================================
//		Commands Allowed Methods
//=================================================


//--------------------------------------------------------
/**
 *	Method      : DeltaController::is_OnState_allowed()
 *	Description : Execution allowed for On command.
 */
//--------------------------------------------------------

bool DeltaController::is_On_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::ON	|| 
		get_state() == Tango::FAULT	|| 
		get_state() == Tango::ALARM	|| 
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(DeltaController::OnStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DeltaController::OnStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DeltaController::is_OffState_allowed()
 *	Description : Execution allowed for Off command.
 */
//--------------------------------------------------------

bool DeltaController::is_Off_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::OFF)
	{

	/*----- PROTECTED REGION ID(DeltaController::OffStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DeltaController::OffStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DeltaController::is_ResetState_allowed()
 *	Description : Execution allowed for Reset command.
 */
//--------------------------------------------------------

bool DeltaController::is_Reset_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Reset command.

	/*----- PROTECTED REGION ID(DeltaController::ResetStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DeltaController::ResetStateAllowed

	return true;
}


	/*----- PROTECTED REGION ID(DeltaController::are_dynamic_commands_allowed) ENABLED START -----*/

	//	Add your code to check if dynamic commands are alowed

	/*----- PROTECTED REGION END -----*/	//	DeltaController::are_dynamic_commands_allowed

}	// namespace DeltaController_ns
