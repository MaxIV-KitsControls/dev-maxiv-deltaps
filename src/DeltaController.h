/*----- PROTECTED REGION ID(DeltaController.h) ENABLED START -----*/
//=============================================================================
//
// file :        DeltaController.h
//
// description : Include for the DeltaController class.
//
// project :     Delta power supply.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef DELTACONTROLLER_H
#define DELTACONTROLLER_H


#include <tango.h>

//  Communication interface to the power supply
#include <DeltaPS.h>

/*----- PROTECTED REGION END -----*/


/**
 *	DeltaController class Description:
 *	Device server to control all groups of Delta power supplies
 */

namespace DeltaController_ns
{
	/*----- PROTECTED REGION ID(DeltaController::Additional Class Declarations) ENABLED START -----*/

		//		Additional Class Declarations

	/*----- PROTECTED REGION END -----*/	//	DeltaController::Additional Class Declarations


class DeltaController : public Tango::Device_4Impl
{


	/*----- PROTECTED REGION ID(DeltaController::Data Members) ENABLED START -----*/

	//		Add your own data members
private:
    // Object handling ethernet communication to the power supply
    PSC_ETH::PSC_ETH* powersupply;
    double vlim, impedance;
    bool isDeviceOn;

	/*----- PROTECTED REGION END -----*/	//	DeltaController::Data Members


//	Device property data members
public:		//	IPAddress:	IP Address of Delta power supply controller.
	//	The Delta power supplies only allow one active connection.
	string	iPAddress;
	//	GroupNumber:	Delta power supply group number:
	//	1 -  ES-series, SM700 series, SM3000 series
	//	2 - SM800, SM1500, SM6000
	//	3 - SM3300 series
	//	4 - Combined power supplies
	Tango::DevShort	groupNumber;
	
	bool	mandatoryNotDefined;
	
//	Attribute data members
public:
	Tango::DevDouble	*attr_Current_read;
	Tango::DevDouble	*attr_Voltage_read;
	Tango::DevDouble	*attr_Impedance_read;
	Tango::DevDouble	*attr_Vlim_read;
	Tango::DevDouble	*attr_MaxCurrent_read;
	Tango::DevDouble	*attr_MaxVoltage_read;



//	Constructors and destructors
public:
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	DeltaController(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	DeltaController(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	DeltaController(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The object destructor.
	 */	
	~DeltaController() {delete_device();};



//	Miscellaneous methods
public:
	/**
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/**
	 *	Initialize the device
	 */
	virtual void init_device();
	/**
	 *	Read the device properties from database
	 */
	 void get_device_property();
	/**
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();
	/**
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);


//	Attribute methods
public:
	/**
	 *	Method      : DeltaController::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	virtual void read_attr_hardware(vector<long> &attr_list);


	/**
	 *	Current attribute related methods.
	 *	Description: The DC current of the selected pole.
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_Current(Tango::Attribute &attr);
	virtual void write_Current(Tango::WAttribute &attr);
	virtual bool is_Current_allowed(Tango::AttReqType type);



	/**
	 *	Voltage attribute related methods.
	 *	Description: The measured voltage of the magnet. 
	 *             The Delta power supplies operate in voltage mode which means that an output voltage must be set before setting the output current. 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_Voltage(Tango::Attribute &attr);
	virtual void write_Voltage(Tango::WAttribute &attr);
	virtual bool is_Voltage_allowed(Tango::AttReqType type);



	/**
	 *	Impedance attribute related methods.
	 *	Description: Set impedance of load to correctly set voltage of combined power supply (group 4)
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_Impedance(Tango::Attribute &attr);
	virtual void write_Impedance(Tango::WAttribute &attr);
	virtual bool is_Impedance_allowed(Tango::AttReqType type);



	/**
	 *	Vlim attribute related methods.
	 *	Description: Set Vlim to correctly set voltage of combined power supply (group 4)
	 *             If set current is I, V = Vlim*I*Impedance
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_Vlim(Tango::Attribute &attr);
	virtual void write_Vlim(Tango::WAttribute &attr);
	virtual bool is_Vlim_allowed(Tango::AttReqType type);



	/**
	 *	MaxCurrent attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_MaxCurrent(Tango::Attribute &attr);
	virtual bool is_MaxCurrent_allowed(Tango::AttReqType type);



	/**
	 *	MaxVoltage attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_MaxVoltage(Tango::Attribute &attr);
	virtual bool is_MaxVoltage_allowed(Tango::AttReqType type);




	/**
	 *	Method      : DeltaController::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	void add_dynamic_attributes();

//	Command related methods
public: 
	/**
	 *	Command State related methods.
	 */
	virtual Tango::DevState dev_state();

	/**
	 *	Command Status related methods.
	 */
	virtual Tango::ConstDevString dev_status();

	/**
	 *	Command On related methods.
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);

	/**
	 *	Command Off related methods.
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);

	/**
	 *	Command Reset related methods.
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);



	/*----- PROTECTED REGION ID(DeltaController::Additional Method prototypes) ENABLED START -----*/

	//	Additional Method prototypes

	/*----- PROTECTED REGION END -----*/	//	DeltaController::Additional Method prototypes

};

	/*----- PROTECTED REGION ID(DeltaController::Additional Classes Definitions) ENABLED START -----*/

	//	Additional Classes definitions

	/*----- PROTECTED REGION END -----*/	//	DeltaController::Additional Classes Definitions

} //	namespace

#endif	//	DELTACONTROLLER_H
