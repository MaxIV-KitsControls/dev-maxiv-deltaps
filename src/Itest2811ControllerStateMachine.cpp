/*----- PROTECTED REGION ID(Itest2811ControllerStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Itest2811ControllerStateMachine.cpp
//
// description : C++ source for the Itest2811Controller and its alowed
//               methods for commands and attributes
//
// project :     BILT multi channel power supply.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================



#include <Itest2811Controller.h>
#include <Itest2811ControllerClass.h>

/*----- PROTECTED REGION END -----*/


/*
 * Itest2811Controller states description:
 *
 * ON :	Magnet is ON, all three channels are ON. 
 * OFF :	Magnet is OFF, all three channels are OFF. 
 * FAULT :	Error detected by the BILT magnet. 
 * ALARM :	Alarm detected on one or more channels. 
 * UNKNOWN :	Communication fault 
 */

namespace Itest2811Controller_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : Itest2811Controller::is_CurrentsState_allowed()
 *	Description : Execution allowed for Currents attribute.
 */
//--------------------------------------------------------

bool Itest2811Controller::is_Currents_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for Currents attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(Itest2811Controller::CurrentsStateAllowed_WRITE) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::CurrentsStateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for Currents attribute in READ access.
	
	/*----- PROTECTED REGION ID(Itest2811Controller::read_CurrentsStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::read_CurrentsStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Itest2811Controller::is_VoltagesState_allowed()
 *	Description : Execution allowed for Voltages attribute.
 */
//--------------------------------------------------------

bool Itest2811Controller::is_Voltages_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
		//	Not any excluded states for Voltages attribute in READ access.
	
	/*----- PROTECTED REGION ID(Itest2811Controller::read_VoltagesStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::read_VoltagesStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Itest2811Controller::is_ImpedancesState_allowed()
 *	Description : Execution allowed for Impedances attribute.
 */
//--------------------------------------------------------

bool Itest2811Controller::is_Impedances_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
		//	Not any excluded states for Impedances attribute in READ access.
	
	/*----- PROTECTED REGION ID(Itest2811Controller::read_ImpedancesStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::read_ImpedancesStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Itest2811Controller::is_SetCurrentsRMSState_allowed()
 *	Description : Execution allowed for SetCurrentsRMS attribute.
 */
//--------------------------------------------------------

bool Itest2811Controller::is_SetCurrentsRMS_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
		//	Not any excluded states for SetCurrentsRMS attribute in READ access.
	
	/*----- PROTECTED REGION ID(Itest2811Controller::read_SetCurrentsRMSStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::read_SetCurrentsRMSStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Itest2811Controller::is_SetCurrentsAverageState_allowed()
 *	Description : Execution allowed for SetCurrentsAverage attribute.
 */
//--------------------------------------------------------

bool Itest2811Controller::is_SetCurrentsAverage_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
		//	Not any excluded states for SetCurrentsAverage attribute in READ access.
	
	/*----- PROTECTED REGION ID(Itest2811Controller::read_SetCurrentsAverageStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::read_SetCurrentsAverageStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Itest2811Controller::is_FramesPerSecondState_allowed()
 *	Description : Execution allowed for FramesPerSecond attribute.
 */
//--------------------------------------------------------

bool Itest2811Controller::is_FramesPerSecond_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
		//	Not any excluded states for FramesPerSecond attribute in READ access.
	
	/*----- PROTECTED REGION ID(Itest2811Controller::read_FramesPerSecondStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::read_FramesPerSecondStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Itest2811Controller::is_ErrorsPerSecondState_allowed()
 *	Description : Execution allowed for ErrorsPerSecond attribute.
 */
//--------------------------------------------------------

bool Itest2811Controller::is_ErrorsPerSecond_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
		//	Not any excluded states for ErrorsPerSecond attribute in READ access.
	
	/*----- PROTECTED REGION ID(Itest2811Controller::read_ErrorsPerSecondStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::read_ErrorsPerSecondStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Itest2811Controller::is_ErrorCountersState_allowed()
 *	Description : Execution allowed for ErrorCounters attribute.
 */
//--------------------------------------------------------

bool Itest2811Controller::is_ErrorCounters_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
		//	Not any excluded states for ErrorCounters attribute in READ access.
	
	/*----- PROTECTED REGION ID(Itest2811Controller::read_ErrorCountersStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::read_ErrorCountersStateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Itest2811Controller::is_TemperaturesState_allowed()
 *	Description : Execution allowed for Temperatures attribute.
 */
//--------------------------------------------------------

bool Itest2811Controller::is_Temperatures_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
		//	Not any excluded states for Temperatures attribute in READ access.
	
	/*----- PROTECTED REGION ID(Itest2811Controller::read_TemperaturesStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::read_TemperaturesStateAllowed_READ

	return true;
}


//=================================================
//	Dynamic Attributes Allowed Methods
//=================================================


	/*----- PROTECTED REGION ID(Itest2811Controller::are_dynamic_attributes_allowed) ENABLED START -----*/

	//	Add your code to check if dynamic attributes are alowed

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::are_dynamic_attributes_allowed


//=================================================
//		Commands Allowed Methods
//=================================================


//--------------------------------------------------------
/**
 *	Method      : Itest2811Controller::is_OnState_allowed()
 *	Description : Execution allowed for On command.
 */
//--------------------------------------------------------

bool Itest2811Controller::is_On_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::ON	|| 
		get_state() == Tango::FAULT	|| 
		get_state() == Tango::ALARM	|| 
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(Itest2811Controller::OnStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::OnStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Itest2811Controller::is_OffState_allowed()
 *	Description : Execution allowed for Off command.
 */
//--------------------------------------------------------

bool Itest2811Controller::is_Off_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::OFF)
	{

	/*----- PROTECTED REGION ID(Itest2811Controller::OffStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::OffStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Itest2811Controller::is_ResetState_allowed()
 *	Description : Execution allowed for Reset command.
 */
//--------------------------------------------------------

bool Itest2811Controller::is_Reset_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Reset command.

	/*----- PROTECTED REGION ID(Itest2811Controller::ResetStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::ResetStateAllowed

	return true;
}


	/*----- PROTECTED REGION ID(Itest2811Controller::are_dynamic_commands_allowed) ENABLED START -----*/

	//	Add your code to check if dynamic commands are alowed

	/*----- PROTECTED REGION END -----*/	//	Itest2811Controller::are_dynamic_commands_allowed

}	// namespace Itest2811Controller_ns
